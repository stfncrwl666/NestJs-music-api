generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  password       String
  role           Role            @default(USER)
  facebookId     String?
  gmailId        String?
  refreshToken   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profile        Profile?
  playlists      Playlist[]
  singers        Singer[]
  musicians      Musician[]
  musicianAlbums MusicianAlbum[]
  singerAlbums   SingerAlbum[]
  songs          Song[]
  musics         Music[]
  favourites     Favourite[]
  tracks         Track[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  gender      Gender
  age         Int
  city        String
  country     String
  address     String
  phone       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique
  favourite   Favourite @relation(fields: [favouriteId], references: [id], onDelete: Cascade)
  favouriteId Int       @unique
}

model Singer {
  id           Int           @id @default(autoincrement())
  name         String
  info         String
  photo        String?
  photoName    String?
  type         SingerType
  gender       Gender
  nationality  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  singerAlbums SingerAlbum[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       Int?
}

model Musician {
  id             Int             @id @default(autoincrement())
  name           String
  info           String
  photo          String?
  photoName      String?
  type           MusicianType
  gender         Gender
  nationality    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  musicianAlbums MusicianAlbum[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         Int?
}

model MusicianAlbum {
  id         Int       @id @default(autoincrement())
  name       String
  image      String
  imageName  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Musician   Musician? @relation(fields: [musicianId], references: [id], onDelete: Cascade)
  musicianId Int?
  musics     Music[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
}

model SingerAlbum {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  imageName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Singer    Singer?  @relation(fields: [singerId], references: [id], onDelete: Cascade)
  singerId  Int?
  songs     Song[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Song {
  id            Int              @id @default(autoincrement())
  name          String
  description   String
  artist        String
  type          SongType
  language      String
  rate          Int
  source        String
  image         String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  SingerAlbum   SingerAlbum?     @relation(fields: [singerAlbumId], references: [id], onDelete: Cascade)
  singerAlbumId Int?
  tracks        Track[]
  playlists     SongPlaylists[]
  favourites    SongFavourites[]
  User          User?            @relation(fields: [userId], references: [id])
  userId        Int?
}

model Music {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  artist          String
  type            MusicType
  language        String
  rate            Int
  source          String
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MusicianAlbum   MusicianAlbum?    @relation(fields: [musicianAlbumId], references: [id], onDelete: Cascade)
  musicianAlbumId Int?
  tracks          Track[]
  playlists       MusicPlaylists[]
  favourites      MusicFavourites[]
  User            User?             @relation(fields: [userId], references: [id])
  userId          Int?
}

model Favourite {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  profile   Profile?
  tracks    Track[]
  musics    MusicFavourites[]
  songs     SongFavourites[]
  User      User?             @relation(fields: [userId], references: [id])
  userId    Int?
}

model Playlist {
  id        Int              @id @default(autoincrement())
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  User      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  tracks    Track[]
  musics    MusicPlaylists[]
  songs     SongPlaylists[]
}

model Track {
  id          Int        @id @default(autoincrement())
  title       String
  link        String
  index       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Song        Song?      @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId      Int?
  Music       Music?     @relation(fields: [musicId], references: [id], onDelete: Cascade)
  musicId     Int?
  Favourite   Favourite? @relation(fields: [favouriteId], references: [id], onDelete: Cascade)
  favouriteId Int?
  Playlist    Playlist?  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId  Int?
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
}

model MusicPlaylists {
  Music      Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  musicId    Int
  Playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId Int

  @@id([musicId, playlistId])
}

model MusicFavourites {
  Music       Music     @relation(fields: [musicId], references: [id])
  musicId     Int
  Favourite   Favourite @relation(fields: [favouriteId], references: [id])
  favouriteId Int

  @@id([musicId, favouriteId])
}

model SongPlaylists {
  Playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  Song       Song     @relation(fields: [songId], references: [id])
  songId     Int

  @@id([songId, playlistId])
}

model SongFavourites {
  Song        Song      @relation(fields: [songId], references: [id])
  songId      Int
  Favourite   Favourite @relation(fields: [favouriteId], references: [id])
  favouriteId Int

  @@id([songId, favouriteId])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum MusicianType {
  SINGLE
  MUSIC_BAND
}

enum SingerType {
  SINGLE
  MUSIC_BAND
}

enum SongType {
  CLASSICAL
  POP
  ROCK
  METAL
  COUNTRY
  HIP_HOP
  BALLADS
  DANCE
  LOVE
  GOSPEL
}

enum MusicType {
  PIANO
  KEYBOARD
  RECORDER
  CLASSICAL_GUITAR
  DRUM
  ELECTRIC_GUITAR
  VIOLIN
  BASS_GUITAR
  SAXOPHONE
  FLUTE
  CELLO
  CLARINET
  TRUMPET
  HARP
}
